{
  "version": 3,
  "sources": ["../../react-fitty/src/index.tsx"],
  "sourcesContent": ["import React from 'react';\nimport fitty from 'fitty';\n\nconst fullWidth = { width: '100%' };\n\n// todo support style and className on Wrapper(root div) and Ref div\n// one solution could be adding style prop for root and another styleProp to ref\n\n/**\n * Snugly resizes text to fit its parent container width\n */\nexport const ReactFitty = React.forwardRef<\n    HTMLElement,\n    React.HTMLAttributes<HTMLDivElement> & { children?: React.ReactNode; minSize?: number; maxSize?: number; wrapText?: boolean }\n>(function ReactFitty(\n    { children, minSize = 12, maxSize = 512, wrapText = false, ...rest },\n    ref: React.MutableRefObject<any> | ((instance: any) => void) | null\n) {\n    const internalRef = React.useRef<HTMLDivElement>(null);\n\n    /**\n     * Need to use the correct ref because the component ref can contain a className that dynamically\n     * change the text size\n     */\n    const correctRef = (ref as React.MutableRefObject<HTMLDivElement>) || internalRef;\n\n    React.useLayoutEffect(() => {\n        const effectRef = (ref as React.MutableRefObject<HTMLDivElement>) || internalRef;\n        const fitInstance = fitty(effectRef!.current, {\n            minSize: minSize,\n            maxSize: maxSize,\n            multiLine: wrapText,\n            observeMutations: {\n                subtree: true,\n                childList: true,\n                characterData: true,\n                attributeFilter: ['class'],\n            },\n        });\n\n        // wait browser finish text width calc with relative properties like rem and %\n        // then, fit text in the next animation frame\n        // maybe that needed to be handled in fitty?\n        setTimeout(() => {\n            fitInstance.fit();\n        }, 0);\n\n        return () => {\n            fitty(effectRef.current!).unsubscribe();\n        };\n    }, []);\n\n    // fitty need an extra div to avoid parent padding issue\n    // see https://github.com/rikschennink/fitty/issues/20\n    return (\n        <div style={fullWidth}>\n            <div {...rest} ref={correctRef as React.MutableRefObject<HTMLDivElement>}>\n                {children}\n            </div>\n        </div>\n    );\n});\n"],
  "mappings": ";;;;;;;;;;;;AAGA,IAAMA,YAAY;EAAEC,OAAO;AAAT;IAQLC,aAAaC,aAAAA,QAAMC,WAG9B,SAASF,YACP;EAAEG;EAAUC,UAAU;EAAIC,UAAU;EAAKC,WAAW;EAAO,GAAGC;AAA9D,GACAC,KAFF;AAIE,QAAMC,cAAcR,aAAAA,QAAMS,OAAuB,IAA7B;AAMpB,QAAMC,aAAcH,OAAkDC;AAEtER,eAAAA,QAAMW,gBAAgB,MAAA;AAClB,UAAMC,YAAaL,OAAkDC;AACrE,UAAMK,cAAcC,qBAAMF,UAAWG,SAAS;MAC1CZ;MACAC;MACAY,WAAWX;MACXY,kBAAkB;QACdC,SAAS;QACTC,WAAW;QACXC,eAAe;QACfC,iBAAiB,CAAC,OAAD;MAJH;IAJwB,CAArB;AAezBC,eAAW,MAAA;AACPT,kBAAYU,IAAZ;IACH,GAAE,CAFO;AAIV,WAAO,MAAA;AACHT,2BAAMF,UAAUG,OAAX,EAAqBS,YAA1B;IACH;EACJ,GAAE,CAAA,CAxBH;AA4BA,SACIxB,aAAAA,QAAAA,cAAA,OAAA;IAAKyB,OAAO5B;KACRG,aAAAA,QAAAA,cAAA,OAAA,OAAA,OAAA,CAAA,GAASM,MAAAA;IAAMC,KAAKG;MACfR,QADL,CADJ;AAMP,CAlDyB;",
  "names": ["fullWidth", "width", "ReactFitty", "React", "forwardRef", "children", "minSize", "maxSize", "wrapText", "rest", "ref", "internalRef", "useRef", "correctRef", "useLayoutEffect", "effectRef", "fitInstance", "fitty", "current", "multiLine", "observeMutations", "subtree", "childList", "characterData", "attributeFilter", "setTimeout", "fit", "unsubscribe", "style"]
}
